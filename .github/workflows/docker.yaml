name: Docker Image Build

on:
  push:
    tags:
      - '*'

permissions:
  contents: read
  packages: write

jobs:
  prepare:
    runs-on: ubuntu-latest
    steps:
      - name: Set outputs
        id: set-outputs
        run: |
          echo 'image=ghcr.io/${{ github.repository_owner }}/openrefine' >> "${GITHUB_OUTPUT}"
          echo 'push=true' >> "${GITHUB_OUTPUT}"
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ steps.set-outputs.outputs.image }}
          tags: |
            type=ref,event=tag
          labels: |
            org.opencontainers.image.title=OpenRefine
            org.opencontainers.image.description=OpenRefine container generator through versiont ags
            org.opencontainers.image.authors=${{ github.actor }}
            org.opencontainers.image.url=https://github.com/${{ github.repository }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.version=${{ github.ref_name }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ steps.meta.outputs.created }}
    outputs:
      image: ${{ steps.set-outputs.outputs.image }}
      push: ${{ steps.set-outputs.outputs.push }}
      meta-version: ${{ steps.meta.outputs.version }}
      meta-labels: ${{ steps.meta.outputs.labels }}
      meta-json: ${{ steps.meta.outputs.json }}

  build:
    needs:
      - prepare
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm/v6
          - linux/arm/v7
          - linux/arm64
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set vars
        id: vars
        run: |
          echo "artifact-name=digest-$(echo '${{ matrix.platform }}' | tr / -)" >> "${GITHUB_OUTPUT}"
          echo 'cache-to=type=gha,scope=${{ github.ref_name }}-${{ matrix.platform }}' >> "${GITHUB_OUTPUT}"
          if [[ '${{ github.event_name }}' == 'push' ]]; then
            if [[ '${{ github.ref }}' == 'refs/tags/v'* ]]; then
              branch="$(git branch -r --contains '${{ github.ref }}')"
              branch="${branch##*/}"
              echo "cache-from=type=gha,scope=${branch}-${{ matrix.platform }}" >> "${GITHUB_OUTPUT}"
            else
              echo 'cache-from=type=gha,scope=${{ github.ref_name }}-${{ matrix.platform }}' >> "${GITHUB_OUTPUT}"
            fi
          else
            EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
            echo "cache-from<<${EOF}" >> "${GITHUB_OUTPUT}"
            printf '%s\n' \
              "type=gha,scope=${{ github.ref_name }}-${{ matrix.platform }}" \
              "type=gha,scope=${{ github.base_ref }}-${{ matrix.platform }}" \
              >> "${GITHUB_OUTPUT}"
            echo "${EOF}" >> "${GITHUB_OUTPUT}"
          fi
      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: ${{ matrix.platform }}
          build-args: VERSION=${{ needs.prepare.outputs.meta-version }}
          labels: ${{ needs.prepare.outputs.meta-labels }}
          outputs: |
            type=image,name=${{ needs.prepare.outputs.image }},push-by-digest=true,name-canonical=true,push=${{ needs.prepare.outputs.push }}
          cache-from: |
            ${{ steps.vars.outputs.cache-from }}
          cache-to: |
            ${{ steps.vars.outputs.cache-to }}
      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest='${{ steps.build.outputs.digest }}'
          touch "/tmp/digests/${digest#sha256:}"
      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.vars.outputs.artifact-name }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  push:
    needs:
      - prepare
      - build
    runs-on: ubuntu-latest
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          pattern: digest-*
          merge-multiple: true
          path: /tmp/digests
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -r '"-t " + (.tags | join(" -t "))' <<< '${{ needs.prepare.outputs.meta-json }}') \
            $(printf '${{ needs.prepare.outputs.image }}@sha256:%s ' *)
      - name: Inspect image
        run: |
          docker buildx imagetools inspect '${{ needs.prepare.outputs.image }}:${{ needs.prepare.outputs.meta-version }}'